AWSTemplateFormatVersion: "2010-09-09"
Description: >
  CloudFormation template to create IAM Groups with S3 read access 
  and Secrets Manager for one-time password generation.

Resources:
  OneTimePassword:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: OneTimePassword
      Description: "This secret has a dynamically generated secret password."
      GenerateSecretString:
        SecretStringTemplate: '{"username": "test-user"}'
        GenerateStringKey: "password"
        PasswordLength: 8
        ExcludeCharacters: '@/\'

  # S3 group
  S3Group:
    Type: "AWS::IAM::Group"
    Properties:
      GroupName: S3Group

  # EC2 group
  EC2Group:
    Type: "AWS::IAM::Group"
    Properties:
      GroupName: EC2Group

  # S3 read access policy with S3 and EC2 group attached
  S3ReadAccessPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: S3ReadAccessPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:GetObject"
              - "s3:ListBucket"
            Resource: "*"
      Groups:
        - !Ref S3Group
        - !Ref EC2Group

  # User 1 in s3 group with autogenerated password and a password reset on first login.
  IAMUser1:
    Type: AWS::IAM::User
    Properties:
      UserName: "user1"
      Groups:
        - !Ref S3Group
      LoginProfile:
        Password: !Sub "{{resolve:secretsmanager:${OneTimePassword}::password}}"
        PasswordResetRequired: true

  # Parameter Store to store user 1 email
  User1EmailParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "/user/emails/user1"
      Type: String
      Value: "user1@example.com"
      Description: "Email address for User 1"


  # EventBridge Rule to detect new IAM user creation
  UserCreationEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: Rule to detect new IAM user creation
      EventPattern:
        source:
          - "aws.iam"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "iam.amazonaws.com"
          eventName:
            - "CreateUser"
      Targets:
        - Arn: !GetAtt PrintUserPasswordLambda.Arn
          Id: "NotifyUserLambdaFunction"

  # Lambda Function to print user email and password
  PrintUserPasswordLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3

          def handler(event, context):
              print("starting..")

              ssm = boto3.client('ssm')
              secrets_manager = boto3.client('secretsmanager')
          
              # Parse the event to extract the username from 'detail' section
              user_name = event['detail']['requestParameters']['userName']
              email_param = f"/user/emails/{user_name.lower()}"

              email_response = ssm.get_parameter(Name=email_param, WithDecryption=False)
              email = email_response['Parameter']['Value']

              secret_name = "OneTimePassword"
              secret_response = secrets_manager.get_secret_value(SecretId=secret_name)
              secret = json.loads(secret_response['SecretString'])
              password = secret['password']

              print(f"User Name: {user_name}")
              print(f"Email: {email}")
              print(f"Password: {password}")

              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'userName': user_name,
                      'email': email,
                      'password': password}
                  )
              }
      Runtime: python3.12
      Timeout: 10

  # IAM Role for Lambda function
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "LambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaUserAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                  - "secretsmanager:GetSecretValue"
                  - "logs:*"
                Resource: "*"

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt PrintUserPasswordLambda.Arn
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt UserCreationEventRule.Arn

  CloudWatchLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PrintUserPasswordLambda}"
      RetentionInDays: 2

Outputs:
  User1Details:
    Description: "Email and Password of User 1"
    Value: !Sub "Email: {{resolve:ssm:/user/emails/user1}}, Password: {{resolve:secretsmanager:${OneTimePassword}::password}}"
